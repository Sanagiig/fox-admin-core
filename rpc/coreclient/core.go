// Code generated by goctl. DO NOT EDIT.
// Source: core.proto

package coreclient

import (
	"context"

	"github.com/Sanagiig/fox-admin-core/rpc/types/core"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseIDInt32Resp  = core.BaseIDInt32Resp
	BaseIDInt64Resp  = core.BaseIDInt64Resp
	BaseIDResp       = core.BaseIDResp
	BaseIDStringResp = core.BaseIDStringResp
	BaseIDUint32Resp = core.BaseIDUint32Resp
	BaseResp         = core.BaseResp
	BaseUUIDResp     = core.BaseUUIDResp
	Empty            = core.Empty
	IDInt32Req       = core.IDInt32Req
	IDInt64Req       = core.IDInt64Req
	IDReq            = core.IDReq
	IDStringReq      = core.IDStringReq
	IDUint32Req      = core.IDUint32Req
	IDsInt32Req      = core.IDsInt32Req
	IDsInt64Req      = core.IDsInt64Req
	IDsReq           = core.IDsReq
	IDsStringReq     = core.IDsStringReq
	IDsUint32Req     = core.IDsUint32Req
	PageInfoReq      = core.PageInfoReq
	UUIDReq          = core.UUIDReq
	UUIDsReq         = core.UUIDsReq

	Core interface {
		InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultCore struct {
		cli zrpc.Client
	}
)

func NewCore(cli zrpc.Client) Core {
	return &defaultCore{
		cli: cli,
	}
}

func (m *defaultCore) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewCoreClient(m.cli.Conn())
	return client.InitDatabase(ctx, in, opts...)
}
