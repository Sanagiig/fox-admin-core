// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: example_rpc.proto

package examplerpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExampleRpc_InitDatabase_FullMethodName = "/examplerpc.ExampleRpc/initDatabase"
)

// ExampleRpcClient is the client API for ExampleRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleRpcClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
}

type exampleRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleRpcClient(cc grpc.ClientConnInterface) ExampleRpcClient {
	return &exampleRpcClient{cc}
}

func (c *exampleRpcClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, ExampleRpc_InitDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleRpcServer is the server API for ExampleRpc service.
// All implementations must embed UnimplementedExampleRpcServer
// for forward compatibility
type ExampleRpcServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	mustEmbedUnimplementedExampleRpcServer()
}

// UnimplementedExampleRpcServer must be embedded to have forward compatible implementations.
type UnimplementedExampleRpcServer struct {
}

func (UnimplementedExampleRpcServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedExampleRpcServer) mustEmbedUnimplementedExampleRpcServer() {}

// UnsafeExampleRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleRpcServer will
// result in compilation errors.
type UnsafeExampleRpcServer interface {
	mustEmbedUnimplementedExampleRpcServer()
}

func RegisterExampleRpcServer(s grpc.ServiceRegistrar, srv ExampleRpcServer) {
	s.RegisterService(&ExampleRpc_ServiceDesc, srv)
}

func _ExampleRpc_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleRpcServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleRpc_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleRpcServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleRpc_ServiceDesc is the grpc.ServiceDesc for ExampleRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "examplerpc.ExampleRpc",
	HandlerType: (*ExampleRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _ExampleRpc_InitDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example_rpc.proto",
}
